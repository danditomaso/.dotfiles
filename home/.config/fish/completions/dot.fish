# Fish shell completions for dot command
# Auto-generated by dot completions command

# Main command completions
complete -c dot -f

# Commands
complete -c dot -n "__fish_use_subcommand" -a "init" -d "Initialize and install dotfiles"
complete -c dot -n "__fish_use_subcommand" -a "update" -d "Update dotfiles and packages"
complete -c dot -n "__fish_use_subcommand" -a "doctor" -d "Run diagnostics and check installation"
complete -c dot -n "__fish_use_subcommand" -a "package" -d "Package management commands"
complete -c dot -n "__fish_use_subcommand" -a "check-packages" -d "Check which packages are installed/missing"
complete -c dot -n "__fish_use_subcommand" -a "retry-failed" -d "Retry failed package installations"
complete -c dot -n "__fish_use_subcommand" -a "summary" -d "Summarize recent git commits using Claude Code"
complete -c dot -n "__fish_use_subcommand" -a "benchmark-shell" -d "Benchmark Fish shell startup performance"
complete -c dot -n "__fish_use_subcommand" -a "stow" -d "Create symlinks for dotfiles using GNU Stow"
complete -c dot -n "__fish_use_subcommand" -a "backup" -d "Backup management commands"
complete -c dot -n "__fish_use_subcommand" -a "completions" -d "Generate Fish shell completions"
complete -c dot -n "__fish_use_subcommand" -a "link" -d "Install dot command globally (create symlink in PATH)"
complete -c dot -n "__fish_use_subcommand" -a "unlink" -d "Uninstall global dot command (remove symlink)"
complete -c dot -n "__fish_use_subcommand" -a "edit" -d "Open dotfiles in editor"
complete -c dot -n "__fish_use_subcommand" -a "help" -d "Show help message"

# Global options
complete -c dot -n "__fish_use_subcommand" -l "skip-ssh" -d "Skip SSH key generation"
complete -c dot -n "__fish_use_subcommand" -l "skip-font" -d "Skip font installation"
complete -c dot -n "__fish_use_subcommand" -l "version" -d "Show version information"
complete -c dot -n "__fish_use_subcommand" -s "h" -l "help" -d "Show help message"

# Package subcommands
complete -c dot -n "__fish_seen_subcommand_from package" -n "not __fish_seen_subcommand_from add remove update list help" -a "add" -d "Add package to bundle and install it"
complete -c dot -n "__fish_seen_subcommand_from package" -n "not __fish_seen_subcommand_from add remove update list help" -a "remove" -d "Remove package from bundle and optionally uninstall"
complete -c dot -n "__fish_seen_subcommand_from package" -n "not __fish_seen_subcommand_from add remove update list help" -a "update" -d "Update packages"
complete -c dot -n "__fish_seen_subcommand_from package" -n "not __fish_seen_subcommand_from add remove update list help" -a "list" -d "List packages in bundle files"
complete -c dot -n "__fish_seen_subcommand_from package" -n "not __fish_seen_subcommand_from add remove update list help" -a "help" -d "Show package help"

# Package add completions
complete -c dot -n "__fish_seen_subcommand_from package; and __fish_seen_subcommand_from add" -n "not __fish_seen_subcommand_from brew cask" -a "brew" -d "Brew formula"
complete -c dot -n "__fish_seen_subcommand_from package; and __fish_seen_subcommand_from add" -n "not __fish_seen_subcommand_from brew cask" -a "cask" -d "Brew cask"
complete -c dot -n "__fish_seen_subcommand_from package; and __fish_seen_subcommand_from add" -a "base" -d "Add to base bundle"
complete -c dot -n "__fish_seen_subcommand_from package; and __fish_seen_subcommand_from add" -a "work" -d "Add to work bundle"

# Package remove/update completions
complete -c dot -n "__fish_seen_subcommand_from package; and __fish_seen_subcommand_from remove" -a "base" -d "Remove from base bundle only"
complete -c dot -n "__fish_seen_subcommand_from package; and __fish_seen_subcommand_from remove" -a "work" -d "Remove from work bundle only"
complete -c dot -n "__fish_seen_subcommand_from package; and __fish_seen_subcommand_from remove" -a "auto" -d "Remove from any bundle"

complete -c dot -n "__fish_seen_subcommand_from package; and __fish_seen_subcommand_from update" -a "all" -d "Update all packages"
complete -c dot -n "__fish_seen_subcommand_from package; and __fish_seen_subcommand_from update" -a "base" -d "Update base bundle packages only"
complete -c dot -n "__fish_seen_subcommand_from package; and __fish_seen_subcommand_from update" -a "work" -d "Update work bundle packages only"

# Package list completions
complete -c dot -n "__fish_seen_subcommand_from package; and __fish_seen_subcommand_from list" -a "all" -d "List all packages"
complete -c dot -n "__fish_seen_subcommand_from package; and __fish_seen_subcommand_from list" -a "base" -d "List base packages only"
complete -c dot -n "__fish_seen_subcommand_from package; and __fish_seen_subcommand_from list" -a "work" -d "List work packages only"

# Backup subcommands
complete -c dot -n "__fish_seen_subcommand_from backup" -n "not __fish_seen_subcommand_from create restore list clean compress delete help" -a "create" -d "Create compressed backup"
complete -c dot -n "__fish_seen_subcommand_from backup" -n "not __fish_seen_subcommand_from create restore list clean compress delete help" -a "restore" -d "Restore configuration from backup"
complete -c dot -n "__fish_seen_subcommand_from backup" -n "not __fish_seen_subcommand_from create restore list clean compress delete help" -a "list" -d "List all backups with details"
complete -c dot -n "__fish_seen_subcommand_from backup" -n "not __fish_seen_subcommand_from create restore list clean compress delete help" -a "clean" -d "Remove backups older than 30 days"
complete -c dot -n "__fish_seen_subcommand_from backup" -n "not __fish_seen_subcommand_from create restore list clean compress delete help" -a "compress" -d "Compress legacy uncompressed backups"
complete -c dot -n "__fish_seen_subcommand_from backup" -n "not __fish_seen_subcommand_from create restore list clean compress delete help" -a "delete" -d "Delete specific backup"
complete -c dot -n "__fish_seen_subcommand_from backup" -n "not __fish_seen_subcommand_from create restore list clean compress delete help" -a "help" -d "Show backup help"

# Summary command options
complete -c dot -n "__fish_seen_subcommand_from summary" -s "n" -l "number" -d "Number of commits to summarize" -xa "1 2 3 5 10"
complete -c dot -n "__fish_seen_subcommand_from summary" -s "d" -l "diff" -d "Include diff in analysis"
complete -c dot -n "__fish_seen_subcommand_from summary" -s "v" -l "verbose" -d "Show detailed commit info"
complete -c dot -n "__fish_seen_subcommand_from summary" -s "h" -l "help" -d "Show summary help"

# Benchmark-shell command options
complete -c dot -n "__fish_seen_subcommand_from benchmark-shell" -s "r" -l "runs" -d "Number of benchmark runs" -xa "5 10 15 20 25 30"
complete -c dot -n "__fish_seen_subcommand_from benchmark-shell" -s "v" -l "verbose" -d "Show detailed timing for each run"
complete -c dot -n "__fish_seen_subcommand_from benchmark-shell" -s "h" -l "help" -d "Show benchmark-shell help"

# Dynamic completions for installed packages (when removing or updating)
function __dot_installed_packages
    if command -q brew
        brew list --formula 2>/dev/null | head -20
        brew list --cask 2>/dev/null | head -20
    end
end

complete -c dot -n "__fish_seen_subcommand_from package; and __fish_seen_subcommand_from remove" -xa "(__dot_installed_packages)"
complete -c dot -n "__fish_seen_subcommand_from package; and __fish_seen_subcommand_from update" -xa "(__dot_installed_packages)"

# Dynamic completions for available backups (when restoring or deleting)
function __dot_available_backups
    if test -d ~/.dotbackups
        for backup in ~/.dotbackups/*.tar.gz
            if test -f "$backup"
                basename "$backup" .tar.gz
            end
        end
        for backup in ~/.dotbackups/*
            if test -d "$backup"
                basename "$backup"
            end
        end
    end
end

complete -c dot -n "__fish_seen_subcommand_from backup; and __fish_seen_subcommand_from restore" -xa "(__dot_available_backups)"
complete -c dot -n "__fish_seen_subcommand_from backup; and __fish_seen_subcommand_from delete" -xa "(__dot_available_backups)"
